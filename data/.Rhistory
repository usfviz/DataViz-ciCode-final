cat(past(x[1:5]), "...\n")}
x
myx
print.myvector  <- function(x, ...) {
cat('this is my vector: \n')
cat(pas3t(x[1:5]), "...\n")}
print.myvector  <- function(x, ...) {
cat('this is my vector: \n')
cat(paste(x[1:5]), "...\n")}
myx
library(ggmap)
distQueryCheck()
distQueryCheck()
library(ggmap)
distQueryCheck()
install.packages('leaflet')
library(leaflet)
addMarkers(lng = 174.768, lat = -35.852, popup = "The birthplace of R")
m <- leaflet() %>%
addTiles() %>% # add default OpenStreetMap map tiles
addMarkers(lng = 174.768, lat = -35.852, popup = "The birthplace of R")
m
m <- leaflet() %>%
addTiles() %>% # add default OpenStreetMap map tiles
addMarkers(lng = 174.768, lat = -36.852, popup = "The birthplace of R")
m
leaflet(options = leafletOptions(minZoom = 0, maxZoom = 18))
leaflet(df) %>% addCircles()
df = data.frame(Lat = 1:10, Long = rnorm(10))
leaflet(df) %>% addCircles()
leaflet(df) %>% addCircles(lng = ~Lat, lat = ~Long)
leaflet(df) %>% addCircles()
install.packages('sp')
Sr1 = Polygon(cbind(c(2,4,4,1,2), c(2,3,4,2)))
library(sp)
Sr1 = Polygon(cbind(c(2,4,4,1,2), c(2,3,5,4,2)))
Sr2 = Polygon(cbind(c(5,4,2,5), c(2,3,2,2)))
Sr3 = Polygon(cbind(c(4,4,5,10,4), c(5,3,2,5,5)))
Sr4 = Polygon(cbind(c(5,6,6,5,5), c(4,4,3,3,4)), hole = TRUE)
Srs1 = Polygons(list(Sr1), "s1")
Srs2 = Polygons(list(Sr2), "s2")
Srs3 = Polygons(list(Sr4, Sr2, Sr3), 1:3)
SpP = SpatialPolygons(list(Srs1, Srs2, Srs3), 1:3)
Sr1 = Polygon(cbind(c(2,4,4,1,2), c(2,3,5,4,2)))
Sr2 = Polygon(cbind(c(5,4,2,5), c(2,3,2,2)))
Sr3 = Polygon(cbind(c(4,4,5,10,4), c(5,3,2,5,5)))
Sr4 = Polygon(cbind(c(5,6,6,5,5), c(4,4,3,3,4)), hole = TRUE)
Srs1 = Polygons(list(Sr1), "s1")
Srs2 = Polygons(list(Sr2), "s2")
Srs3 = Polygons(list(Sr4, Sr2, Sr3), 1:3)
SpP = SpatialPolygons(list(Srs1, Srs2, Srs3), 1:3)
Srs3 = Polygons(list(Sr4, Sr2, Sr3), "s3/4")
SpP = SpatialPolygons(list(Srs1, Srs2, Srs3), 1:3)
leaflet(height = "300px") %>% addPolygons(data = SpP)
install.packages('rgeos')
library(sp)
leaflet(height = "300px") %>% addPolygons(data = SpP)
Sr1 = Polygon(cbind(c(2,4,4,1,2), c(2,3,5,4,2)))
Sr2 = Polygon(cbind(c(5,4,2,5), c(2,3,2,2)))
Sr3 = Polygon(cbind(c(4,4,5,10,4), c(5,3,2,5,5)))
Sr4 = Polygon(cbind(c(5,6,6,5,5), c(4,4,3,3,4)), hole = TRUE)
Srs1 = Polygons(list(Sr1), "s1")
Srs2 = Polygons(list(Sr2), "s2")
Srs3 = Polygons(list(Sr4, Sr3), "s3/4")
SpP = SpatialPolygons(list(Srs1, Srs2, Srs3), 1:3)
leaflet(height = "300px") %>% addPolygons(data = SpP)
SpP
mapStates = map("state", fill = TRUE, plot = FALSE)
install.packages('map')
install.packages('maps')
library(maps)
mapStates = map("state", fill = TRUE, plot = FALSE)
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
leaflet(data = mapstates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
leaflet(data = mapStates) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(10, alpha = NULL), stroke = FALSE)
class(mapStates)
typeof(mapStates)
mapStates
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
m %>% addCircleMarkers(radius = runif(100, 4, 10), color = c('red')
m %>% addCircleMarkers(radius = runif(100, 4, 10), color = c('red'))
m %>% addCircleMarkers(radius = runif(100, 4, 10), color = c('red'))
df
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m %>% addtiles
m %>% addTiles()
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m
m %>% addTiles()
rm(ls = list())
rm(ls = list())
rm(list = ls())
cat('\014')
install.packages('tigris')
library(tigris)
blocks('CA', county = 037)
LA_blocks <- blocks(06, county = 037)
LA_blocks <- blocks(06, county = 037)
get_data <- function(subset_size = F) {
voter_data <- read.csv('~/Desktop/MSAN622-DV/final_project/data_viz-ci_code/data/voter_data_v4.csv', stringsAsFactors = F)
if (subset_size != F) {
voter_data <- voter_data[c(1:subset_size), ]
}
# remove NA values
voter_data <- voter_data[complete.cases(voter_data),]
# stack voter and dropoff latitudes and longitudes
voter_data <- voter_data %>% dplyr::select(vid, voter_lat, voter_long, dropoff_lat, dropoff_long, dropoff_city, voter_city) %>%
mutate(voter = paste(voter_long, voter_lat),
dropoff = paste(dropoff_long, dropoff_lat)) %>%
dplyr::select(-voter_long, -voter_lat, -dropoff_long, -dropoff_lat) %>%
gather(location, coordinates, -vid, -dropoff_city, -voter_city) %>%
arrange(dropoff_city)
# peel out individual latitudes and longitudes
voter_data$long <- unlist(lapply(voter_data$coordinates, function(x) as.numeric(unlist(strsplit(x, ' '))[[1]])))
voter_data$lat <- unlist(lapply(voter_data$coordinates, function(x) as.numeric(unlist(strsplit(x, ' '))[[2]])))
# Remove duplicate dropoff locations and create scale
dropoff_data <- voter_data %>% filter(location == 'dropoff') %>% group_by(dropoff_city) %>%
summarise(vid = max(vid), location = max(location), coordinates = max(coordinates), long = max(long), lat = max(lat),
voters = n(), voter_city = max(voter_city)) %>%
mutate(scale = voters/sum(voters))
# remove dropoff information
voter_data <- voter_data[voter_data$location== 'voter', ]
# add color ids to dropoff locations
dropoff_data$color_id <- c(1:nrow(dropoff_data))
dropoff_data$color_id <- dropoff_data$color_id %% 12
# add popup labels to dropoff locations
dropoff_data$popup_label <- paste(sep = "<br/>",
paste0("<b>", dropoff_data$dropoff_city, "</b>"),
paste0(dropoff_data$voters, ' voters'))
# merge information to voters
full_data <- merge(voter_data, dropoff_data[c('dropoff_city', 'voters', 'scale', 'color_id', 'popup_label')], by = 'dropoff_city')
full_data <- rbind(full_data, dropoff_data)
# set the voter data coloring
voter_city <- unique(voter_data$voter_city)
voter_color_id <- lapply(c(78:c(length(voter_city) + 77)), c)
names(voter_color_id) <- voter_city
# re-assign the color id to the vote location
v <- full_data[full_data$location == 'voter', 'voter_city']
full_data[full_data$location == 'voter', 'color_id'] <- unlist(lapply(v, function(x) voter_color_id[[x]] %% 12))
# create alphabetic organization
full_data <- full_data %>% arrange(voter_city)
# ---------------------------------------------------- SUBSET DATA
# full_data <- full_data[1:1000, ]
# ---------------------------------------------------- CREATE MAP
lookup <- voter_data[c('dropoff_city', 'vid')]
dropoff_data$vid <- NULL
double_data <- merge(lookup, dropoff_data, by = 'dropoff_city')
double_data <- rbind(full_data[full_data$location != 'dropoff', ], double_data)
double_data <- double_data %>% arrange(vid, location)
return(list('line_data' = double_data, 'full_data' = full_data))
}
# testing
get_data(subset = 1000)
# the master script for the final project
# Create the UI and the Server
rm(list = ls())
base_path <- '~/Desktop/MSAN622-DV/final_project/data_viz-ci_code/shiny_integration/shinyscripts/'
setwd(base_path)
library('shiny')
library('leaflet')
library('RColorBrewer')
library('ggplot2')
library('tidyr')
library('dplyr')
# custom scripts
source('get_data.R')
source('map_render.R')
# ------------------------------------------ GENERATE THE DATA
# generate the data
map_data <- get_data(subset_size = 1000)
voter_cities <- sort(unique(map_data[['full_data']]$voter_city))
vc_choices <- lapply(voter_cities, c)
names(vc_choices) <- voter_cities
# ------------------------------------------ USER INTERFACE
ui <- fluidPage(
bootstrapPage(
sidebarLayout(
# City selection
sidebarPanel(
# implement city selection
checkboxGroupInput(
'voter_cities', 'Select City of Residence:',
vc_choices)
),
mainPanel(
leafletOutput('mymap', width = '1000px', height = '1000px')
)
)
)
)
# ------------------------------------------ SERVER
server <- function(input, output, session) {
# see get_data function in shiny packages. Structured from
# voter_data_v..csv
filtered_ <- reactive({
vd <- map_data[['line_data']][map_data[['line_data']]$location == 'voter', ]
vids <-vd$vid[vd$voter_city %in% input$voter_cities]
filtered_ <- map_data[['line_data']] %>%
filter(vid %in% vids) %>% arrange(vid, location)
})
# see render_map function in shiny packages.
# load a pre-rendered leaflet object????
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
map_render(map_data)
})
# draw the markers from the ui input
observe({
pal <- colorNumeric( # colors stolen from online (12 set from Tim i think) - https://www.r-bloggers.com/the-paul-tol-21-color-salute/
colors <- c("#00008F", "#0000EA", "#0047FF", "#00A2FF", "#00FEFF", "#5AFFA5", "#B5FF4A", "#FFED00", "#FF9200", "#FF3700", "#DB0000", "#800000"),
filtered_()$color_id)
if (is.na(filtered_()$voter_city[1])) {
return (NULL)
}
vc <- unique(map_data[['line_data']]$voter_city)
m <- leafletProxy('mymap') %>% clearGroup(vc[!(vc %in% input$voter_cities)])
m <- leafletProxy('mymap') %>% clearGroup(input$voter_cities)
for (i in c(1:c(nrow(filtered_())/2))) {
line_segment <- filtered_()[c(i * 2 - 1, i * 2), ]
# voter lines
# m <- addPolylines(m,
# lng = line_segment$long,
# lat = line_segment$lat,
# color = ~pal(line_segment$color_id[2]),
# weight = 2, fillOpacity = .3,
# group = line_segment$voter_city[2])
# voter circles
m <- addCircleMarkers(m,
lng = line_segment$long[2],
lat = line_segment$lat[2],
color = 'black',
fillColor = pal(line_segment$color_id[2]),
weight = .5,
radius = 4, fillOpacity = .5,
group = line_segment$voter_city[2])
# dropoff circles
# lines
}
})
}
# ------------------------------------------ CALL THE APP
shinyApp(ui, server)
voter_data <- read.csv('~/Desktop/MSAN622-DV/final_project/data_viz-ci_code/data/voter_data_v4.csv', stringsAsFactors = F)
voter_data <- voter_data[complete.cases(voter_data),]
str(voter_data)
voter_data <- voter_data %>% dplyr::select(vid, voter_lat, voter_long, dropoff_lat, dropoff_long, dropoff_city, voter_city, city_coord) %>%
mutate(voter = paste(voter_long, voter_lat),
dropoff = paste(dropoff_long, dropoff_lat)) %>%
dplyr::select(-voter_long, -voter_lat, -dropoff_long, -dropoff_lat) %>%
gather(location, coordinates, -vid, -dropoff_city, -voter_city) %>%
arrange(dropoff_city)
str(voter_data)
voter_data$long <- unlist(lapply(voter_data$coordinates, function(x) as.numeric(unlist(strsplit(x, ' '))[[1]])))
voter_data$lat <- unlist(lapply(voter_data$coordinates, function(x) as.numeric(unlist(strsplit(x, ' '))[[2]])))
View(voter_data)
setwd('~/Desktop/PracticumLA/VoterData/Mapping')
setwd('~/Desktop/PracticumLA/VoterData/Data/Final Voter Data/')
rm(list = ls())
cat('\014')
library(ggmap)
library(stringr)
library(leaflet)
library(htmltools)
library(htmlwidgets)
d <- read.csv('voter_data_v3.csv', stringsAsFactors = F)
# if just cities does not work
# cities <- str_split_fixed(d$voter_address, ',', 2)[,2]
# cities <- sort(unique(sub(' ', '', cities)))
city_names <- d$voter_city
city_names <- sort(unique(city_names))
cities <- paste(city_names, ', CA, USA', sep = '')
city_ll <- lapply(cities, geocode)
d  <- read.csv('voter_data_v4.csv', stringsAsFactors = F)
str(d)
sub(',', '', d$city_coord)
d$city_coord  <- sub(',', '', d$city_coord)
str(d)
write.csv(d, 'voter_data_v4.csv')
voter_data <- read.csv('~/Desktop/MSAN622-DV/final_project/data_viz-ci_code/data/voter_data_v4.csv', stringsAsFactors = F)
voter_data <- voter_data[complete.cases(voter_data),]
# stack voter and dropoff latitudes and longitudes
voter_data <- voter_data %>% dplyr::select(vid, voter_lat, voter_long, dropoff_lat, dropoff_long, dropoff_city, voter_city, city_coord) %>%
mutate(voter = paste(voter_long, voter_lat),
dropoff = paste(dropoff_long, dropoff_lat)) %>%
dplyr::select(-voter_long, -voter_lat, -dropoff_long, -dropoff_lat) %>%
gather(location, coordinates, -vid, -dropoff_city, -voter_city) %>%
arrange(dropoff_city)
# peel out individual latitudes and longitudes
voter_data$long <- unlist(lapply(voter_data$coordinates, function(x) as.numeric(unlist(strsplit(x, ' '))[[1]])))
voter_data$lat <- unlist(lapply(voter_data$coordinates, function(x) as.numeric(unlist(strsplit(x, ' '))[[2]])))
warnings()
str(voter_data)
voter_data <- read.csv('~/Desktop/MSAN622-DV/final_project/data_viz-ci_code/data/voter_data_v4.csv', stringsAsFactors = F)
voter_data <- voter_data[complete.cases(voter_data),]
# stack voter and dropoff latitudes and longitudes
voter_data <- voter_data %>% dplyr::select(vid, voter_lat, voter_long, dropoff_lat, dropoff_long, dropoff_city, voter_city, city_coord) %>%
mutate(voter = paste(voter_long, voter_lat),
dropoff = paste(dropoff_long, dropoff_lat)) %>%
dplyr::select(-voter_long, -voter_lat, -dropoff_long, -dropoff_lat) %>%
gather(location, coordinates, -vid, -dropoff_city, -voter_city) %>%
arrange(dropoff_city)
# peel out individual latitudes and longitudes
voter_data$long <- unlist(lapply(voter_data$coordinates, function(x) as.numeric(unlist(strsplit(x, ' '))[[1]])))
voter_data$lat <- unlist(lapply(voter_data$coordinates, function(x) as.numeric(unlist(strsplit(x, ' '))[[2]])))
str(voter_data)
voter_data$coordinates <- NULL
dropoff_data <- voter_data %>% filter(location == 'dropoff') %>% group_by(dropoff_city) %>%
summarise(vid = max(vid), location = max(location), coordinates = max(coordinates), long = max(long), lat = max(lat),
voters = n(), voter_city = max(voter_city)) %>%
mutate(scale = voters/sum(voters))
# remove dropoff information
voter_data <- voter_data[voter_data$location== 'voter', ]
# add color ids to dropoff locations
dropoff_data$color_id <- c(1:nrow(dropoff_data))
dropoff_data$color_id <- dropoff_data$color_id %% 12
# add popup labels to dropoff locations
dropoff_data$popup_label <- paste(sep = "<br/>",
paste0("<b>", dropoff_data$dropoff_city, "</b>"),
paste0(dropoff_data$voters, ' voters'))
dropoff_data <- voter_data %>% filter(location == 'dropoff') %>% group_by(dropoff_city) %>%
summarise(vid = max(vid), location = max(location), long = max(long), lat = max(lat),
voters = n(), voter_city = max(voter_city)) %>%
mutate(scale = voters/sum(voters))
# remove dropoff information
voter_data <- voter_data[voter_data$location== 'voter', ]
# add color ids to dropoff locations
dropoff_data$color_id <- c(1:nrow(dropoff_data))
dropoff_data$color_id <- dropoff_data$color_id %% 12
# add popup labels to dropoff locations
dropoff_data$popup_label <- paste(sep = "<br/>",
paste0("<b>", dropoff_data$dropoff_city, "</b>"),
paste0(dropoff_data$voters, ' voters'))
# merge information to voters
full_data <- merge(voter_data, dropoff_data[c('dropoff_city', 'voters', 'scale', 'color_id', 'popup_label')], by = 'dropoff_city')
full_data <- rbind(full_data, dropoff_data)
voter_data <- read.csv('~/Desktop/MSAN622-DV/final_project/data_viz-ci_code/data/voter_data_v4.csv', stringsAsFactors = F)
voter_data <- voter_data[complete.cases(voter_data),]
voter_data <- voter_data %>% dplyr::select(vid, voter_lat, voter_long, dropoff_lat, dropoff_long, dropoff_city, voter_city, city_coord) %>%
mutate(voter = paste(voter_long, voter_lat),
dropoff = paste(dropoff_long, dropoff_lat)) %>%
dplyr::select(-voter_long, -voter_lat, -dropoff_long, -dropoff_lat) %>%
gather(location, coordinates, -vid, -dropoff_city, -voter_city) %>%
arrange(dropoff_city)
# peel out individual latitudes and longitudes
voter_data$long <- unlist(lapply(voter_data$coordinates, function(x) as.numeric(unlist(strsplit(x, ' '))[[1]])))
voter_data$lat <- unlist(lapply(voter_data$coordinates, function(x) as.numeric(unlist(strsplit(x, ' '))[[2]])))
# drop coordinates
voter_data$coordinates <- NULL
dropoff_data <- voter_data %>% filter(location == 'dropoff') %>% group_by(dropoff_city) %>%
summarise(vid = max(vid), location = max(location), long = max(long), lat = max(lat),
voters = n(), voter_city = max(voter_city)) %>%
mutate(scale = voters/sum(voters))
voter_data <- voter_data[voter_data$location== 'voter', ]
dropoff_data$color_id <- c(1:nrow(dropoff_data))
dropoff_data$color_id <- dropoff_data$color_id %% 12
dropoff_data$popup_label <- paste(sep = "<br/>",
paste0("<b>", dropoff_data$dropoff_city, "</b>"),
paste0(dropoff_data$voters, ' voters'))
nrow(voter_data)
nrow(dropoff_data)
full_data <- merge(voter_data, dropoff_data[c('dropoff_city', 'voters', 'scale', 'color_id', 'popup_label')], by = 'dropoff_city')
nrow(full_data)
full_data <- rbind(full_data, dropoff_data)
voter_data <- read.csv('~/Desktop/MSAN622-DV/final_project/data_viz-ci_code/data/voter_data_v4.csv', stringsAsFactors = F)
voter_data <- voter_data[complete.cases(voter_data),]
voter_data <- voter_data %>% dplyr::select(vid, voter_lat, voter_long, dropoff_lat, dropoff_long, dropoff_city, voter_city, city_coord) %>%
mutate(voter = paste(voter_long, voter_lat),
dropoff = paste(dropoff_long, dropoff_lat)) %>%
dplyr::select(-voter_long, -voter_lat, -dropoff_long, -dropoff_lat) %>%
gather(location, coordinates, -vid, -dropoff_city, -voter_city) %>%
arrange(dropoff_city)
voter_data$long <- unlist(lapply(voter_data$coordinates, function(x) as.numeric(unlist(strsplit(x, ' '))[[1]])))
voter_data$lat <- unlist(lapply(voter_data$coordinates, function(x) as.numeric(unlist(strsplit(x, ' '))[[2]])))
voter_data$coordinates <- NULL
nrow(voter_data)
voter_data <- voter_data %>% arrange(vid, location)
str(voter_data)
city_data <- voter_data %>% filter(location = 'city_coord') %>% group_by(voter_city) %>%
summarise(vid = max(vid), location = max(location), long = max(long), lat = max(lat),
voters = n(), voter_city = max(voter_city)) %>%
mutate(scale = voters/sum(voters))
city_data <- voter_data %>% filter(location == 'city_coord') %>% group_by(voter_city) %>%
summarise(vid = max(vid), location = max(location), long = max(long), lat = max(lat),
voters = n(), voter_city = max(voter_city)) %>%
mutate(scale = voters/sum(voters))
city_data <- voter_data %>% filter(location == 'city_coord') %>% group_by(voter_city) %>%
summarise(vid = max(vid), location = max(location), long = max(long), lat = max(lat),
voters = n(), dropoff_city = max(voter_city)) %>%
mutate(scale = voters/sum(voters))
city_data
# the master script for the final project
# Create the UI and the Server
rm(list = ls())
base_path <- '~/Desktop/MSAN622-DV/final_project/data_viz-ci_code/shiny_integration/shinyscripts/'
setwd(base_path)
library('shiny')
library('leaflet')
library('RColorBrewer')
library('ggplot2')
library('tidyr')
library('dplyr')
# custom scripts
source('get_data.R')
source('map_render.R')
# ------------------------------------------ GENERATE THE DATA
# generate the data
map_data <- get_data(subset_size = 1000)
voter_cities <- sort(unique(map_data[['full_data']]$voter_city))
vc_choices <- lapply(voter_cities, c)
names(vc_choices) <- voter_cities
# ------------------------------------------ USER INTERFACE
ui <- fluidPage(
bootstrapPage(
sidebarLayout(
# City selection
sidebarPanel(
# implement city selection
checkboxGroupInput(
'voter_cities', 'Select City of Residence:',
vc_choices)
),
mainPanel(
leafletOutput('mymap', width = '1000px', height = '1000px')
)
)
)
)
# ------------------------------------------ SERVER
server <- function(input, output, session) {
# see get_data function in shiny packages. Structured from
# voter_data_v..csv
filtered_ <- reactive({
vd <- map_data[['line_data']][map_data[['line_data']]$location == 'voter', ]
vids <-vd$vid[vd$voter_city %in% input$voter_cities]
filtered_ <- map_data[['line_data']] %>%
filter(vid %in% vids) %>% arrange(vid, location)
})
# see render_map function in shiny packages.
# load a pre-rendered leaflet object????
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
map_render(map_data)
})
# draw the markers from the ui input
observe({
pal <- colorNumeric( # colors stolen from online (12 set from Tim i think) - https://www.r-bloggers.com/the-paul-tol-21-color-salute/
colors <- c("#00008F", "#0000EA", "#0047FF", "#00A2FF", "#00FEFF", "#5AFFA5", "#B5FF4A", "#FFED00", "#FF9200", "#FF3700", "#DB0000", "#800000"),
filtered_()$color_id)
if (is.na(filtered_()$voter_city[1])) {
return (NULL)
}
vc <- unique(map_data[['line_data']]$voter_city)
m <- leafletProxy('mymap') %>% clearGroup(vc[!(vc %in% input$voter_cities)])
m <- leafletProxy('mymap') %>% clearGroup(input$voter_cities)
for (i in c(1:c(nrow(filtered_())/2))) {
line_segment <- filtered_()[c(i * 2 - 1, i * 2), ]
# voter lines
# m <- addPolylines(m,
# lng = line_segment$long,
# lat = line_segment$lat,
# color = ~pal(line_segment$color_id[2]),
# weight = 2, fillOpacity = .3,
# group = line_segment$voter_city[2])
# voter circles
m <- addCircleMarkers(m,
lng = line_segment$long[2],
lat = line_segment$lat[2],
color = 'black',
fillColor = pal(line_segment$color_id[2]),
weight = .5,
radius = 4, fillOpacity = .5,
group = line_segment$voter_city[2])
# dropoff circles
# lines
}
})
}
# ------------------------------------------ CALL THE APP
shinyApp(ui, server)
getwd()
setwd("/Users/Rubicon/Desktop/MSAN622-DV/final_project/data_viz-ci_code/data/)
setwd("/Users/Rubicon/Desktop/MSAN622-DV/final_project/data_viz-ci_code/data/')
setwd("/Users/Rubicon/Desktop/MSAN622-DV/final_project/data_viz-ci_code/data/")
d <- read.csv('voter_data_v4.csv')
d <- read.csv('voter_data_v4.csv', stringsAsFactors = F)
e  <- read.csv('voter_to_census.csv', stringsAsFactors = F)
str(d)
str(e)
key  <- read.csv('~/Desktop/PracticumLA/keys/keytokey.R')
d$vid  <- d$X.1
str(d)
d$avid  <- NULL
str(d)
getwd()
write.csv(d, 'voter_data_v4.csv')
getwd()
list.files()
c  <- read.csv('census_aggregate.csv', stringsAsFactors = F)
str(c)
